{
    // Place your go-aoj workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // \t"scope": "javascript,typescript",
    // \t"prefix": "log",
    // \t"body": [
    // \t\t"console.log('$1');",
    // \t\t"$2"
    // \t],
    // \t"description": "Log output to console"
    // }
    "solve": {
        "scope": "go",
        "prefix": "solve",
        "body": [
            "package main",
            "",
            "import \"os\"",
            "",
            "func main() {}",
            "",
            "func solve(dst io.Writer, src io.Reader) {}",
        ],
        "description": "Snippet for function that solves a problem"
    },
    "cmp": {
        "scope": "go",
        "prefix": "test",
        "body": [
            "package main",
            "",
            "import (",
            "\t\"strings\"",
            "\t\"testing\"",
            ")",
            "",
            "func TestSolve(t *testing.T) {",
            "\tt.Parallel()",
            "",
            "\ttests := []struct {",
            "\t\tinput    string",
            "\t\texpected string",
            "\t}{",
            "\t\t{",
            "\t\t\tinput: $1",
            "\t\t\texpected: $2",
            "\t\t},",
            "\t}",
            "",
            "\tfor _, test := range tests {",
            "\t\ttest := test",
            "",
            "\t\tt.Run(test.input, func(t *testing.T) {",
            "\t\t\tt.Parallel()",
            "",
            "\t\t\tactual := new(strings.Builder)",
            "\t\t\tsolve(actual, strings.NewReader(test.input))",
            "\t\t\tif actual.String() != test.expected {",
            "\t\t\t\tt.Errorf(\"got %v, but expected %v\", actual, test.expected)",
            "\t\t\t}",
            "\t\t})",
            "\t}",
            "}",
            "",
        ],
        "description": "Snippet for statements comparing actual and expected ones"
    },
}